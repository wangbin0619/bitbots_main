DWAPlannerROS:
  global_frame_id: odom

  # velocities
  max_vel_trans: 0.1               # The absolute value of the maximum translational velocity for the robot in m/s
  min_vel_trans: 0.00               # The absolute value of the minimum translational velocity for the robot in m/s

  max_vel_x: 0.1                   # The maximum x velocity for the robot in m/s
  min_vel_x: -0.05                   # The minimum x velocity for the robot in m/s

  max_vel_y: 0.08                   # The maximum y velocity for the robot in m/s"
  min_vel_y: -0.08                   # The minimum y velocity for the robot in m/s"

  max_vel_theta: 0.7                 # The absolute value of the maximum rotational velocity for the robot in rad/s
  min_vel_theta: 0.0                 # The absolute value of the minimum rotational velocity for the robot in rad/s
  # acceleration
  acc_lim_x: 1.0                   # The acceleration limit of the robot in the x direction
  acc_lim_y: 1.0                   # The acceleration limit of the robot in the y direction
  acc_lim_theta: 4.0                # The acceleration limit of the robot in the theta direction
  acc_trans_limit: 1.0             # The absolute value of the maximum translational acceleration for the robot in m/s^2


  prune_plan: true                 # Start following closest point of global plan, not first point (if different).

  xy_goal_tolerance: 0.10           # Within what maximum distance we consider the robot to be in goal
  yaw_goal_tolerance: 0.05           # Within what maximum angle difference we consider the robot to face goal direction

  trans_stopped_vel: 0.01           # Below what maximum velocity we consider the robot to be stopped in translation
  theta_stopped_vel: 0.01             # Below what maximum rotation velocity we consider the robot to be stopped in rotation


  # dwa specific
  sim_time: 5                     # The amount of time to roll trajectories out for in seconds
  sim_granularity: 0.025            # The granularity with which to check for collisions along each trajectory in meters
  angular_sim_granularity: 0.1      # The granularity with which to check for collisions for rotations in radians

  path_distance_bias: 5          # The weight for the path distance part of the cost function
  goal_distance_bias: 10.0          # The weight for the goal distance part of the cost function
  occdist_scale: 0.1               # The weight for the obstacle distance part of the cost function
  twirling_scale: 5.0               # The weight for penalizing any changes in robot heading

  stop_time_buffer: 0.2             # The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds
  oscillation_reset_dist: 0.05      # The distance the robot must travel before oscillation flags are reset, in meters
  oscillation_reset_angle: 0.2      # The angle the robot must turn before oscillation flags are reset, in radians

  forward_point_distance: 0.1     # The distance from the center point of the robot to place an additional scoring point, in meters

  scaling_speed: 0.25               # The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
  max_scaling_factor: 0.2           # The maximum factor to scale the robot's footprint by

  vx_samples: 3                     # The number of samples to use when exploring the x velocity space
  vy_samples: 10                    # The number of samples to use when exploring the y velocity space
  vth_samples: 20                   # The number of samples to use when exploring the theta velocity space

  use_dwa: false                     # Use dynamic window approach to constrain sampling velocities to small window.

  holonomic_robot: true             # to tell the planner that we can walk sideways
