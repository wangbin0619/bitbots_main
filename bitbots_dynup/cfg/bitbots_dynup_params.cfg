#!/usr/bin/env python

PACKAGE = 'bitbots_dynup'
import roslib

roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

group_engine = gen.add_group("Engine", type="tab")
group_engine.add("engine_rate", int_t, 1,
                 "How often the engine updates motor goals",
                 100, min=1, max=500)
group_engine.add("foot_rise", double_t, 2,
                 "Rise of the foot",
                 0.08)
group_engine.add("foot_distance", double_t, 2,
                 "How far apart the feet should be from each other. This is only relevant during the initial phase "
                 "when the foot is not yet moving towards the ball",
                 0.18)
group_engine.add("kick_windup_distance", double_t, 2,
                 "How far away from the ball to stop and perform the actual (fast) kick movement",
                 0.2)
group_engine.add("move_trunk_time", double_t, 3,
                 "How long it should take to move the trunk above the support foot before raising the flying foot",
                 0.8)
group_engine.add("raise_foot_time", double_t, 3,
                 "How long it should take to raise the flying foot from the ground",
                 0.1)
group_engine.add("move_to_ball_time", double_t, 3,
                 "How long it should take to move the raised foot to the windup point",
                 1)
group_engine.add("kick_time", double_t, 3,  # TODO replace this with dynamic calculation
                 "This will be removed in the future",
                 0.1)
group_engine.add("move_back_time", double_t, 3,
                 "How long it should take to move the flying foot back after kicking",
                 0.2)
group_engine.add("lower_foot_time", double_t, 3,
                 "How long it should take to lower the foot",
                 0.8)
group_engine.add("move_trunk_back_time", double_t, 3,
                 "How long it should take to move the flying foot back after kicking",
                 0.3)

group_engine.add("choose_foot_corridor_width", double_t, 3,
                 "How wide the corridor should be in which advanced foot-choosing calculations take place."
                 "If kick goal is placed outside this corridor, the foot on that side will automatically be assigned"
                 "the flying foot.",
                 0.4)

group_stabilizing = gen.add_group("Stabilizer", type="tab")
group_stabilizing.add("stabilizing", bool_t, 4,
                      "Whether to use automatic stabilizing or not",
                      True)
group_stabilizing.add("minimal_displacement", bool_t, 4,
                      "Try to stabilize with as little movement as possible",
                      False)
group_stabilizing.add("stabilizing_weight", double_t, 4,
                      "How important bio_ik should regard keeping the robot in a stable position",
                      0.44, min=0, max=1)
group_stabilizing.add("flying_weight", double_t, 4,
                      "How important bio_ik should regard the flying foots position",
                      0.5, min=0, max=1)
group_stabilizing.add("trunk_orientation_weight", double_t, 4,
                      "How important bio_ik should regard keeping the trunk orientation",
                      1, min=0, max=1)
group_stabilizing.add("stabilizing_point_x", double_t, 4,
                      "Where to stabilize over in x direction. Measured from the support foots *_sole frame",
                      0.015, min=-0.5, max=0.5)
group_stabilizing.add("stabilizing_point_y", double_t, 4,
                      "Where to stabilize over in y direction. Measured from the support foots *_sole frame. "
                      "Be aware that - always represents the direction towards base_footprint",
                      -0.023, min=-0.5, max=0.5)

exit(gen.generate(PACKAGE, 'dynup', 'DynUp'))
