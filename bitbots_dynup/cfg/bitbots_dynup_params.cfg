#!/usr/bin/env python3

PACKAGE = 'bitbots_dynup'
import roslib

roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

group_engine = gen.add_group("Engine", type="tab")
group_engine.add("engine_rate", int_t, 1,
                 "How often the engine updates motor goals",
                 100, min=1, max=500)
group_engine.add("foot_distance", double_t, 2,
                 "How far apart the feet should be from each other. This is only relevant during the initial phase ",
                 0.18)
group_engine.add("time_to_squat", double_t, 2,
                 "Time to push the robot into squat position [s]",
                 6.0, 0.0)
group_engine.add("rise_time", double_t, 2,
                 "Time to rise and shine! [s]",
                 7.0, 0.0)
group_engine.add("trunk_height", double_t, 2,
                 "Height of the trunk at the end [m]",
                 0.487)
group_engine.add("trunk_x", double_t, 2,
                 "Height of the trunk at the end [m]",
                 0.016)
group_engine.add("trunk_pitch", double_t, 2,
                 "Pitch of the trunk at the end [rad]",
                 0.1)
group_engine.add("arm_max_length", double_t, 2,
                 "Maximum arm length [m]",
                 #TODO
                 0.4)
group_engine.add("leg_min_length", double_t, 2,
                 "Minimum leg length [m]",
                 #TODO
                 0.3)

#FrontSpline params
group_engine_front = group_engine.add_group("Front", type="hide")
group_engine_front.add("time_hands_side", double_t, 2,
                 "Time to move the hands to the side when fallen to the front [s]",
                 1.0, 0.0)
group_engine_front.add("time_foot_close", double_t, 2,
                 "Time to pull the legs to the body when fallen to the front [s]",
                 2.0, 0.0)
group_engine_front.add("time_hands_front", double_t, 2,
                 "Time to move the hands to the front when fallen to the front [s]",
                 3.0, 0.0)
group_engine_front.add("time_foot_ground", double_t, 2,
                 "Time to put the feet on the ground when fallen to the front [s]",
                 4.0, 0.0)
group_engine_front.add("time_torso_45", double_t, 2,
                 "Time to push the torso up to a 45 degree angle when fallen to the front [s]",
                 5.0, 0.0)
group_engine_front.add("time_to_squat", double_t, 2,
                 "Time to push the robot into squat position [s]",
                 6.0, 0.0)


group_stabilizing = gen.add_group("Stabilizer", type="tab")
group_stabilizing.add("stabilizing", bool_t, 4,
                      "Whether to use automatic stabilizing or not",
                      False)
group_stabilizing.add("minimal_displacement", bool_t, 4,
                      "Try to stabilize with as little movement as possible",
                      True)
group_stabilizing.add("stabilizing_weight", double_t, 4,
                      "How important bio_ik should regard keeping the robot in a stable position",
                      0.5, min=0, max=1)

exit(gen.generate(PACKAGE, 'dynup', 'DynUp'))
