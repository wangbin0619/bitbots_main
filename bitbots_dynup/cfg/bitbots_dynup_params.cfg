#!/usr/bin/env python3

PACKAGE = 'bitbots_dynup'
import roslib

roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

group_engine = gen.add_group("Engine", type="tab")
group_engine.add("engine_rate", int_t, 1,
                 "How often the engine updates motor goals",
                 min=1, max=1000)
group_engine.add("foot_distance", double_t, 2,
                 "How far apart the feet should be from each other. [m]",
                 min=0.05, max=0.5)
group_engine.add("wait_in_squat", double_t, 2,
                 "Time to wait in the squat position [s]",
                 min=0, max=10)
group_engine.add("leg_min_length", double_t, 2,
                 "Minimum leg length [m]",
                 min=0.01, max=1)
group_engine.add("arm_side_offset", double_t, 2,
                 "How far the arms should be offseted to the side of the robot to avoid collisions[m]",
                 min=0.01, max=1)

group_engine_squat = group_engine.add_group("Squat", type="hide")
group_engine_squat.add("rise_time", double_t, 2,
                 "Time to rise and shine! [s]",
                 min=0, max=10)
group_engine_squat.add("trunk_height", double_t, 2,
                 "Height of the trunk at the end [m]",
                 min=0, max=10)
group_engine_squat.add("trunk_x", double_t, 2,
                 "X offset of the trunk at the end [m]",
                 min=-1, max=1)
group_engine_squat.add("trunk_pitch", double_t, 2,
                 "Pitch of the trunk at the end [deg]",
                 min=-90, max=90)

#BackSpline params
group_engine_back = group_engine.add_group("Back", type="hide")
group_engine_back.add("trunk_overshoot_angle_back", double_t, 2,
                       "How far the robots torso should overshoot when pushing onto the feet [deg]",
                       min=0, max=90)
group_engine_back.add("time_legs_close", double_t, 2,
                      "Time to pull the legs to the body [s]",
                      min=0, max=10)
group_engine_back.add("time_hands_down", double_t, 2,
                      "Time to put the wrists flat on the ground [s]",
                      min=0, max=10)
group_engine_back.add("time_hands_back", double_t, 2,
                      "Time to push the hands back entirely [s]",
                      min=0, max=10)
group_engine_back.add("time_squat_push", double_t, 2,
                 "Time to push the robot into squat position [s]",
                 min=0, max=10)
group_engine_back.add("time_full_squat", double_t, 2,
                      "Time to complete the push and completely stand in a squat",
                      min=0, max=10)

#FrontSpline params
group_engine_front = group_engine.add_group("Front", type="hide")
group_engine_front.add("max_leg_angle", double_t, 2,
                       "The maximum angle the legs can be rotated around the Y axis [deg]",
                       min=-90, max=90)
group_engine_front.add("trunk_overshoot_angle_front", double_t, 2,
                       "How far the robots torso should overshoot when pushing onto the feet [deg]",
                       min=0, max=90)
group_engine_front.add("time_hands_side", double_t, 2,
                 "Time to move the hands to the side when fallen to the front [s]",
                 min=0.1, max=10)
group_engine_front.add("time_hands_rotate", double_t, 2,
                 "Time to rotate the hands [s]",
                 min=0.1, max=10)
group_engine_front.add("time_foot_close", double_t, 2,
                 "Time to pull the legs to the body when fallen to the front [s]",
                 min=0, max=10)
group_engine_front.add("time_hands_front", double_t, 2,
                 "Time to move the hands to the front when fallen to the front [s]",
                 min=0, max=10)
group_engine_front.add("time_foot_ground", double_t, 2,
                 "Time to put the feet on the ground when fallen to the front [s]",
                 min=0, max=10)
group_engine_front.add("time_torso_45", double_t, 2,
                 "Time to push the torso up to a 45 degree angle when fallen to the front [s]",
                 min=0, max=10)
group_engine_front.add("time_to_squat", double_t, 2,
                 "Time to push the robot into squat position [s]",
                 min=0, max=10)


#Stabilizing params
group_stabilizing = gen.add_group("Stabilizer", type="tab")
group_stabilizing.add("stabilizing", bool_t, 4,
                      "Whether to use automatic stabilizing or not")
group_stabilizing.add("minimal_displacement", bool_t, 4,
                      "Try to stabilize with as little movement as possible")

#Visualization params
group_visualization = gen.add_group("Visualization", type="tab")
group_visualization.add("spline_smoothness", int_t, 8,
                        "how many points to extract from splines for visualization",
                        min=1, max=200)
group_visualization.add("display_debug", bool_t, 4,
                        "If the debug markers should be published")


exit(gen.generate(PACKAGE, 'dynup', 'DynUp'))
