#!/usr/bin/env python3
PACKAGE = "bitbots_localization"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


group_ros = gen.add_group("ROS", type="tab")
group_misc = gen.add_group("MISC", type="tab")
group_visualization = gen.add_group("Visualization", type="tab")
group_pf = gen.add_group("Particle Filter", type="tab")
group_diffusion = group_pf.add_group("Diffusion")
group_drift = group_pf.add_group("Drift")

group_misc.add("initial_robot_x1", double_t, 0, "The initial x position of the robot in meters (measured from the center)", None, min=-15, max=15)
group_misc.add("initial_robot_y1", double_t, 0, "The initial y position of the robot in meters (measured from the center)", None, min=-5, max=5)
group_misc.add("initial_robot_t1", double_t, 0, "The initial orientation of the robot in radiant", None, min=-5, max=5)
group_misc.add("initial_robot_x2", double_t, 0, "The initial x position of the robot in meters (measured from the center)", None, min=-15, max=15)
group_misc.add("initial_robot_y2", double_t, 0, "The initial y position of the robot in meters (measured from the center)", None, min=-5, max=5)
group_misc.add("initial_robot_t2", double_t, 0, "The initial orientation of the robot in radiant", None, min=-5, max=5)
group_misc.add("initial_robot_x", double_t, 0, "The initial x position of the robot in meters (measured from the center)", None, min=-15, max=15)
group_misc.add("initial_robot_y", double_t, 0, "The initial y position of the robot in meters (measured from the center)", None, min=-5, max=5)
group_misc.add("initial_robot_t", double_t, 0, "The initial orientation of the robot in radiant", None, min=-5, max=5)

group_misc.add("init_mode", double_t, 0, "init mode. 0: start, 1: left, 2: right, 3: position", None, min=-5, max=5)

group_misc.add("map_path_lines", str_t, 0, "path to the lines map image", None)
group_misc.add("map_path_goals", str_t, 0, "path to the goals map image", None)
group_misc.add("map_path_field_boundary", str_t, 0, "path to the field boundary map image", None)
group_misc.add("map_path_corners", str_t, 0, "path to the field feature corners map image", None)
group_misc.add("map_path_crosses", str_t, 0, "path to the field features crosses map image", None)
group_misc.add("map_path_tcrossings", str_t, 0, "path to the field features tcrossing map image", None)
group_misc.add("field_x", double_t, 0, "lenght of the field in m", None)
group_misc.add("field_y", double_t, 0, "width of the field in m", None)
group_misc.add("field_padding", double_t, 0, "space added around field boundary map", None)
group_misc.add("field_boundary_interpolation_steps", double_t, 0, "number of steps that will be interpolated between two fieldboundaryRelative points", None)





group_ros.add("line_topic", str_t, 0, "the line data subscribe topic", None)
group_ros.add("non_line_topic", str_t, 0, "the non line data subscribe topic", None)
group_ros.add("goal_topic", str_t, 0, "the goal data subscribe topic", None)
group_ros.add("fieldboundary_topic", str_t, 0, "the fieldboundary data subscribe topic", None)
group_ros.add("corners_topic", str_t, 0, "the corners data subscribe topic", None)
group_ros.add("crosses_topic", str_t, 0, "the crosses data subscribe topic", None)
group_ros.add("tcrossings_topic", str_t, 0, "the tcrossing data subscribe topic", None)
group_ros.add("cam_info_topic", str_t, 0, "the camera info subscribe topic", None)
group_ros.add("fieldboundary_in_image_topic", str_t, 0, "the fieldboundary in image data subscribe topic", None)

group_ros.add("reset_filters_service_name", str_t, 0, "the name of the reset filters service", None)
group_ros.add("pose_publishing_topic", str_t, 0, "frame in which local objects and markers are published", None)
group_ros.add("particle_publishing_topic", str_t, 0, "frame in which local objects and markers are published", None)
group_ros.add("publishing_frame", str_t, 0, "frame in which local objects and markers are published", None)
group_ros.add("publishing_frequency", int_t, 0, "the publishing frequency in Hz", None, min=1, max=100)

group_visualization.add("debug_visualization", bool_t, 0, "publish debug visualization messages", None)

# filter stuff
group_pf.add("particle_number", int_t, 0, "The amount of particles", None, min=1, max=10000)
group_pf.add("resampling_interval", int_t, 0, "Number of filterupdates performed before resampling", None, min=0, max=10000)
group_pf.add("use_lines", bool_t, 0, "use line information", None)
group_pf.add("use_non_lines", bool_t, 0, "use non line information", None)
group_pf.add("use_goals", bool_t, 0, "use goal information", None)
group_pf.add("use_fieldboundary", bool_t, 0, "use fieldboundary information", None)
group_pf.add("use_corners", bool_t, 0, "use corners information", None)
group_pf.add("use_tcrossings", bool_t, 0, "use tcrossing information", None)
group_pf.add("use_crosses", bool_t, 0, "use crosses information", None)
group_pf.add("min_weight", double_t, 0, "The minimal weight of a particle", None, min=0.0, max=1)
group_pf.add("min_resampling_weight", double_t, 0, "The minimal weight of the best particle to resample", None, min=0.0, max=1)
group_pf.add("percentage_best_particles", int_t, 0, "Percentage of best particles to generate pose from", None, min=0, max=100)
group_pf.add("distance_factor", double_t, 0, "how much distant measurements get their weights reduced", None, min=0.0, max=1)
group_pf.add("lines_factor", double_t, 0, "how much line measurements are contribute to the particle weight", None, min=0.0, max=1)
group_pf.add("non_lines_factor", double_t, 0, "how much nonline measurements are contribute to the particle weight", None, min=0.0, max=1)
group_pf.add("goals_factor", double_t, 0, "how much goal measurements are contribute to the particle weight", None, min=0.0, max=1)
group_pf.add("field_boundary_factor", double_t, 0, "how much field boundary measurements contribute to the particle weight", None, min=0.0, max=1)
group_pf.add("corners_factor", double_t, 0, "how much corners measurements contribute to the particle weight", None, min=0.0, max=1)
group_pf.add("tcrossings_factor", double_t, 0, "how much tcrossingd measurements contribute to the particle weight", None, min=0.0, max=1)
group_pf.add("crosses_factor", double_t, 0, "how much crosses measurements contribute to the particle weight", None, min=0.0, max=1)

group_pf.add("min_motion_linear", double_t, 0, "minimum amount of linear motion in cm to be classified as motion ", None, min=0.0, max=10)
group_pf.add("min_motion_angular", double_t, 0, "minimum amount of angular motion in rad to be classified as motion ", None, min=0.0, max=1)
group_pf.add("filter_only_with_motion", bool_t, 0, "if true, motion model  if new linepoints are available", None)

group_diffusion.add("diffusion_x_std_dev", double_t, 0, "The standard deviation of the diffusion on the x axis", None, min=0.1, max=5)
group_diffusion.add("diffusion_y_std_dev", double_t, 0, "The standard deviation of the diffusion on the y axis", None, min=0.1, max=5)
group_diffusion.add("diffusion_t_std_dev", double_t, 0, "The standard deviation of the diffusion on the rotation theta", None, min=0.01, max=5)
group_diffusion.add("diffusion_multiplicator", double_t, 0, "The multiplicator of the diffusion", None, min=0.0001, max=10)

group_drift.add("drift_distance_to_direction", double_t, 0, "Dirft applied to the walking direction based on the walked distance.", None, min=0.0, max=5)
group_drift.add("drift_roation_to_direction",  double_t, 0, "Dirft applied to the walking direction based on the robots rotation delta.", None, min=0.0, max=5)
group_drift.add("drift_distance_to_distance",  double_t, 0, "Dirft applied to the walking distance based on the walked distance.", None, min=0.0, max=5)
group_drift.add("drift_roation_to_distance",   double_t, 0, "Dirft applied to the walking distance based on the robots rotation delta.", None, min=0.0, max=5)
group_drift.add("drift_distance_to_rotation",  double_t, 0, "Dirft applied to the robots orientation based on the walked distance.", None, min=0.0, max=5)
group_drift.add("drift_rotation_to_rotation",  double_t, 0, "Dirft applied to the robots orientation based on the robots rotation delta.", None, min=0.0, max=5)

exit(gen.generate(PACKAGE, "localization", "Localization"))
